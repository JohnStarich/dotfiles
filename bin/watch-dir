#!/usr/bin/env python3
"""
Watch a directory for file changes and run a command if they change.
Provide the directory and file extensions to watch.
"""

from select import select
from typing import Collection
from io import BytesIO
import os
import re
import shutil
import subprocess
import sys


def _usage():
    return "Usage: {} [DIR] EXT[,EXT[,...]] COMMAND".format(
        os.path.basename(sys.argv[0]))


def _prettify_arg(arg: str) -> str:
    if ' ' not in arg:
        return arg
    if '"' in arg:
        return '"%s"' % arg.replace('"', r'\"')
    return "'%s'" % arg.replace("'", r"\'")


def _suffix_to_pattern(suffix: str) -> str:
    pattern = re.escape(suffix)
    if '.' in suffix:
        return ".*/" + pattern + "$"
    else:
        return ".*/.*" + pattern + "$"


def main(name: str, *args: Collection[str]) -> int:
    if len(args) < 3:
        print(_usage(), file=sys.stderr)
        return 2
    if os.path.isdir(args[0]):
        directory, *args = args
    else:
        directory = os.getcwd()

    watch(directory, args[0].split(','), *args[1:])


def watch(directory, suffixes: Collection[str],
          *command: Collection[str]) -> int:
    if shutil.which('fswatch') is None:
        print("fswatch is required. Install with `brew install fswatch`",
              file=sys.stderr)
        return 1
    patterns = list(map(_suffix_to_pattern, suffixes))
    full_pattern = '|'.join(patterns)

    watch_command = [
        'fswatch', '--extended', '--exclude=.*',
        '--include=' + full_pattern,
        directory,
    ]

    watch_process = subprocess.Popen(watch_command, stdout=subprocess.PIPE)
    wait_str = "### Waiting for changes... (pattern: " + full_pattern + ")"
    running_str = "### Running command: %s" \
        % ' '.join(map(_prettify_arg, command))
    try:
        subprocess.call(command)
        print(wait_str)
        for _ in timed_readline(watch_process.stdout):
            print(running_str)
            subprocess.call(command)
            print(wait_str)
    except KeyboardInterrupt:
        return 1
    return 0


def timed_readline(f):
    reader = timed_read(f)
    buf = BytesIO()
    while True:
        b = next(reader)
        if b is None:
            s = buf.getvalue().decode()
            if len(s) != 0:
                yield s.split('\n')
                buf = BytesIO()
        else:
            buf.write(b)


def timed_read(f, seconds=2):
    fd = f.fileno()
    while True:
        r, _, _ = select([fd], [], [], seconds)
        if fd in r:
            yield os.read(fd, 50)
        else:
            yield None


if __name__ == '__main__':
    rc = main(*sys.argv)
    if rc is None:
        rc = 0
    sys.exit(rc)
