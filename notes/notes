#!/bin/bash
# Notes
# 
# A handy script to quickly begin writing notes in your favorite editor
# for any given subject.
#
NOTES_USAGE="\
Usage: notes SUBJECT [DATE ...]

Arguments:
    SUBJECT the directory to store notes in, relative to notes base directory
    DATE    relative or absolute date, defaults to current date
                e.g. two days ago, last wednesday, november 3
"
#
# Tip:
#   This script uses tab expansion to quickly identify your subject directory names, so
#   it may be more convenient to add case-insensitive tab expansion to your ~/.inputrc
#
#   echo 'set completion-ignore-case on' >> ~/.inputrc
#
# Example directory structure:
#   ~/.notesrc contents:
#       NOTES_BASE=~/school
#       NOTES_SUBDIR=notes
#   ~/school/
#       ConcurrentProgramming/
#           notes/
#               01-30.txt
#               01-31.txt
#       SoftwareTesting/
#           notes/
#               01-31.txt
# Usage for this example:
#   Write today's notes for Software Testing:
#       notes SoftwareTesting
#       notes Sof
#   Open yesterday's notes for Concurrent Programming:
#       notes ConcurrentProgramming yesterday
#       notes Co yesterday
#       notes Co January 30

# You can override the directory and file names
# by adding the variables to your `~/.notesrc`
[[ -f "$HOME/.notesrc" ]] && source "$HOME/.notesrc"

NOTES_SUBJECT=$1
NOTES_NAME=${@:2}

# Notes file structure:
#   $NOTES_BASE/$NOTES_SUBDIR/$(date $NOTES_FORMAT)
NOTES_BASE=${NOTES_BASE:-$HOME/notes}
NOTES_EDITOR=${NOTES_EDITOR:-$EDITOR}
NOTES_EDITOR=${NOTES_EDITOR:-vim}
NOTES_SUBDIR=${NOTES_SUBDIR:-}
NOTES_FORMAT=${NOTES_FORMAT:-+%m-%d.txt}

function usage() {
    echo "$NOTES_USAGE" >&2
}

function verify_dependencies() {
    if [[ ! -d $NOTES_BASE ]]; then
        echo >&2 "\
Notes base directory does not exist: '$NOTES_BASE'
Either create the directory or add 'NOTES_BASE=/your/directory/path' to your ~/.notesrc"
        return 1
    fi
    # Check we have needed programs installed
    local DEPENDENCIES=(gdate "$NOTES_EDITOR")
    if ! which "${DEPENDENCIES[@]}" > /dev/null; then
        echo >&2 "\
Error: Some dependencies are missing
Install any of the following dependencies that are missing:
    ${DEPENDENCIES[*]}
Note: the gnu utilities like gdate are installed with 'coreutils'"
        return 1
    fi
}

function parse_args() {
    # NOTES_SUBJECT = full path to the notes directory
    # Check subject folder argument was provided
    if [[ -z "$NOTES_SUBJECT" ]]; then
        usage
        return 2
    fi
    # Try to tab-complete the directory name
    local notes_subject_dir=$(echo echo $NOTES_BASE/$NOTES_SUBJECT$'\t' | bash -i 2>&-)
    # If we couldn't get the directory, tell them to try again
    if [[ ! -d "$notes_subject_dir" ]]; then
        echo "Could not find subject by name $NOTES_SUBJECT." >&2
        echo "Attempted to tab-expand path: $notes_subject_dir" >&2
        return 2
    fi
    # Trim off trailing slash
    NOTES_SUBJECT=$(sed 's/\/$//' <<<$notes_subject_dir)

    # NOTES_NAME = name of the notes file for the current date, or specified date
    # If extra args provided, parse as relative date string and open that
    # date's note, else open today's note.
    if [[ ! -z "$NOTES_NAME" ]]; then
        NOTES_NAME=$(gdate --date "$NOTES_NAME" "${NOTES_FORMAT}")
        if [[ -z "$NOTES_NAME" ]]; then
            usage
            return 2
        fi
    else
        NOTES_NAME=$(gdate "${NOTES_FORMAT}")
    fi
}

# Exit on bad return code
set -e
verify_dependencies
parse_args
# If subject subdirectory is set, ensure directory exists
if [[ ! -z "$NOTES_SUBDIR" ]]; then
    NOTES_SUBJECT+="/$NOTES_SUBDIR"
    if [[ ! -d "$NOTES_SUBJECT" ]]; then
        mkdir -p "$NOTES_SUBJECT"
    fi
fi

if [[ -t 1 ]]; then
	# Replace this process with the editor for the intended note
	cd "$NOTES_SUBJECT"
	exec "$NOTES_EDITOR" "$NOTES_SUBJECT/$NOTES_NAME"
else
	# If not a tty, output file path to desired note
	echo -n "$NOTES_SUBJECT/$NOTES_NAME"
fi
