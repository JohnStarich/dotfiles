" try/catch is only in Vim7
if v:version >= 700
    " If pathogen is installed, start it up
    try
        if empty(glob('~/.vim/autoload/plug.vim'))
            " auto fetch vim-plug, run :PlugInstall manually to complete setup
            silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
              \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        endif
        call plug#begin('~/.vim/bundle')

        Plug 'bullets-vim/bullets.vim'                                            " automated bullet lists
        Plug 'godlygeek/tabular'                                                  " Vim script for text filtering and alignment
        Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } } " markdown preview plugin for (neo)vim
        Plug 'jistr/vim-nerdtree-tabs'                                            " NERDTree and tabs together in Vim, painlessly (unifies the NERDTree panel across tabs)
        Plug 'junegunn/goyo.vim'                                                  " Distraction-free writing in Vim
        Plug 'junegunn/vim-plug'                                                  " Include help for vim-plug
        Plug 'mbbill/undotree'                                                    " The undo history visualizer for VIM
        Plug 'pangloss/vim-javascript'                                            " Vastly improved Javascript indentation and syntax support in Vim
        Plug 'plasticboy/vim-markdown'                                            " Markdown Vim Mode (does table formatting)
        Plug 'raimondi/delimitmate'                                               " Vim plugin, provides insert mode auto-completion for quotes, parens, brackets, etc.
        Plug 'reedes/vim-wordy'                                                   " Uncover usage problems in your writing
        Plug 'scrooloose/nerdcommenter'                                           " Vim plugin for intensely nerdy commenting powers
        Plug 'scrooloose/nerdtree'                                                " A tree explorer plugin for vim.
        Plug 'tpope/vim-dotenv'                                                   " Basic support for .env and Procfile
        Plug 'tpope/vim-eunuch'                                                   " Helpers for UNIX (:Remove, :Move, :Mkdir, etc)
        Plug 'tpope/vim-fugitive'                                                 " A Git wrapper
        Plug 'tpope/vim-sleuth'                                                   " Heuristically set buffer options (tab stops, tab expansion, etc.)
        Plug 'tpope/vim-surround'                                                 " Delete/change/add parentheses/quotes/XML-tags/much more with ease
        Plug 'xolox/vim-misc'                                                     " Miscellaneous auto-load Vim scripts (library used by easytags.vim)
        Plug '~/.vim/johnstarich/vim-notes'                                       " Adds commands for using my 'notes' CLI
        Plug '~/.vim/johnstarich/vim-slack'                                       " Adds commands for interacting with Slack

        if has("nvim")
            Plug 'brenoprata10/nvim-highlight-colors'                         " Highlight colors for neovim - hex codes, color names, etc.
            Plug 'hrsh7th/cmp-buffer'                                         " nvim-cmp source for buffer words
            Plug 'hrsh7th/cmp-cmdline'                                        " nvim-cmp source for vim's cmdline
            Plug 'hrsh7th/cmp-nvim-lsp'                                       " nvim-cmp source for neovim builtin LSP client
            Plug 'hrsh7th/cmp-nvim-lsp-signature-help'                        " cmp-nvim-lsp-signature-help
            Plug 'hrsh7th/cmp-nvim-lua'                                       " nvim-cmp source for nvim lua
            Plug 'hrsh7th/cmp-path'                                           " nvim-cmp source for path
            Plug 'hrsh7th/cmp-vsnip'                                          " nvim-cmp source for vim-vsnip
            Plug 'hrsh7th/nvim-cmp'                                           " A completion plugin for neovim coded in Lua.
            Plug 'hrsh7th/vim-vsnip'                                          " Snippet plugin for vim/nvim that supports LSP/VSCode's snippet format.
            Plug 'neovim/nvim-lspconfig'                                      " Quickstart configs for Nvim LSP
            Plug 'nvim-lua/plenary.nvim'                                      " plenary: full; complete; entire; absolute; unqualified. All the lua functions I don't want to write twice. (used by telescope)
            Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' } " FZF sorter for telescope written in c (performance boost for telescope)
            Plug 'nvim-telescope/telescope.nvim', { 'branch': '0.1.x' }       " Find, Filter, Preview, Pick. All lua, all the time.
            Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}       " Installing treesitter is required to fix rpm packaging issues with neovim 0.10.0
            Plug 'nvim-treesitter/nvim-treesitter-context'                    " Show current function at top of split
            Plug 'ray-x/go.nvim'                                              " Modern Go plugin for Neovim, based on gopls, treesitter AST, Dap and a variety of go tools. (only used for :GoCoverage capability)
        end

        call plug#end()
        source ~/.vim/plugin-config.vim
        if has("nvim")
            source ~/.vim/nvim.lua
        endif
    catch
        echo "Failed sourcing ~/.vim/plugin-config.vim:\n" . v:exception
    endtry
endif

filetype plugin on
filetype indent on
syntax on

" Prevent issues with non UNIX-conforming shells
"set shell=/bin/bash

command! NonASCII syntax match nonascii "[^\x00-\x7F]"
highlight nonascii ctermfg=015 ctermbg=001 cterm=none

" Background light/dark settings
function! SetBackground(mode)
    if a:mode == 'light'
        set background=light
        highlight CursorLine term=none cterm=none guibg=none
        highlight CursorLineNR term=none cterm=none ctermbg=White ctermfg=Black
        highlight SpellBad ctermfg=240 ctermbg=255 cterm=none
    else
        set background=dark
        highlight CursorLine term=none cterm=none guibg=none
        highlight CursorLineNR term=none cterm=none ctermbg=Black ctermfg=White
        highlight SpellBad ctermfg=015 ctermbg=000 cterm=none
    endif
endfunc

function! AutoDetectBackground()
    if has("mac")
        silent call system("mac-term-dark-background")
        if v:shell_error
            " Terminal background color is light
            call SetBackground('light')
        else
            call SetBackground('dark')
        endif
    elseif ! has("nvim") && exists("$TMUX")
        let &t_RB = "\ePtmux;\e\e]11;?\007\e\\"
    else
        silent call system("background-color-dark")
        if v:shell_error
            call SetBackground('light')
        else
            call SetBackground('dark')
        endif
    endif
endfunction
call AutoDetectBackground()

if has("nvim")
    " Disable and reset colors in neovim's default color scheme. Use default colors provided by terminal.
    highlight Normal guifg=0 guibg=NONE      " Remove default gui background colors, use terminal default instead.
    highlight Visual ctermbg=lightgray       " Lighten highlight color a bit.
    highlight NormalFloat ctermbg=white      " Darken floating window a bit.
    highlight StatusLineNC ctermbg=lightgray " Possibly fixed in the next release of neovim: https://github.com/neovim/neovim/commit/9b9f54e2c1cd3a1aae7de33a5d0e70be8d57b1fd
endif

function! BackgroundToggle()
    if(&background == 'dark')
        call SetBackground('light')
    else
        call SetBackground('dark')
    endif
endfunc
nnoremap <leader>l :call BackgroundToggle()<cr>
nnoremap <C-l> :call BackgroundToggle()<cr>
inoremap <C-l> <C-O>:call BackgroundToggle()<cr>

" Set up tabs for autoindentation and tab expansion
set tabstop=4 shiftwidth=4 "copyindent smarttab smartindent
set expandtab " automatically change tabs to spaces (overrides copyindent)
set linebreak " break lines on tokens rather than chars

" Set statusline
" %f shows current file
set statusline=%f

" Highlight current line's line number
" Original idea: https://stackoverflow.com/a/13275419/1530494
set cursorline

" Switch tabs with Ctrl-Tab
"nnoremap <C-Left> :tabprevious<CR>
"nnoremap <C-Right> :tabnext<CR>
"inoremap <C-Left> <C-O>:tabprevious<CR>
"inoremap <C-Right> <C-O>:tabnext<CR>

" Go to first few tabs by number shortcut
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

if has("patch-7.4.354")
    set breakindent
    set breakindentopt=shift:8
else
    set showbreak=>\ "
endif

" Increase max memory when initializing syntax highlighting (kibibytes)
set maxmempattern=10000

" Set Markdown options
function! SetMarkdownOptions()
    "setlocal breakindentopt=shift:-4 " TODO: attempt to set hanging indent
    set breakindentopt=shift:4
    inoremap . .<C-g>u
    inoremap ! !<C-g>u
    inoremap ? ?<C-g>u
    inoremap : :<C-g>u
    " Use z= to suggest spelling corrections,
    " use zg to add the word under the cursor,
    " use zw to mark the word as bad
endfunction
autocmd FileType markdown call SetMarkdownOptions()

function! SetShellOptions()
    let b:sleuth_automatic = 0
    setlocal expandtab
endfunction
autocmd FileType sh call SetShellOptions()

" Spell Check
"set spell  " disabled in favor of coc-spell-checker
set spellcapcheck=""
set spellfile=~/.vim/spell/en.utf-8.add

set nohlsearch
if has("nvim")
    tnoremap <Esc> <C-\><C-n>
else
    set history=5000
end

" Move cursor one line at a time, always
inoremap <silent> <Down> <C-o>gj
inoremap <silent> <Up> <C-o>gk
nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')
nnoremap <expr> <Down> (v:count == 0 ? 'gj' : 'j')
nnoremap <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap <expr> <Up> (v:count == 0 ? 'gk' : 'k')
"onoremap <silent> j gj
"onoremap <silent> k gk

" Searches
"set hlsearch " Highlight all search matches
set incsearch " Auto go to search results while typing
set ignorecase smartcase " Case insensitive search unless caps are used

" Tab completion will show menu instead of completing
set wildmenu
"set wildmode=list:longest,full " Print out a large list of all tab-completable files

" auto-complete plus spelling
set complete=.,w,b,u,t,i,kspell

" Remap :wq keys for accidentally holding shift
command! W w
command! Q q
command! -bang Q q<bang>
command! WQ wq
command! Wq wq
command! Qa qa
command! -nargs=+ -complete=file E e <args>

" Use ctrl left and right to switch tabs
"nnoremap H :tabprevious<CR>
"nnoremap L :tabnext<CR>

" Enable mouse interaction
if has("mouse")
    set mouse=a
endif
" Enable vim split dragging
if ! has("nvim")
    if has("mouse_sgr")
        set ttymouse=sgr
    else
        set ttymouse=xterm2
    end
end

" Allow for some padding before/after cursor when scrolling
"set scrolloff=3
set scrolljump=5

" Enable code folding
set nofoldenable
set foldmethod=syntax

" Line numbers
" Enable line numbers
set number
" Set ruler, to show line and column
set ruler
function! NumberToggle()
    if(&number == 0 || &relativenumber == 1)
        set number
        set norelativenumber
    else
        set relativenumber
    endif
endfunc
function! ShowAbsoluteLineNumbers()
    if (&number == 1)
       set norelativenumber
    endif
endfunc
function! ShowRelativeLineNumbers()
    if (&number == 1)
       set relativenumber
    endif
endfunc
" Allows toggling between line numbers and relative line numbers.
nnoremap <C-n> :call NumberToggle()<cr>
" Show absolute line numbers in insert mode or when switching away from a buffer
autocmd BufLeave,FocusLost,InsertEnter * call ShowAbsoluteLineNumbers()
" Show relative line numbers in normal mode or when switching to a buffer
autocmd BufEnter,FocusGained,InsertLeave * call ShowRelativeLineNumbers()

" smart indent when entering insert mode with i on empty lines
" source: https://stackoverflow.com/a/3003636/1530494
function! IndentWithI()
    if getline('.') =~ '^\s*$'
        return "\"_cc"
    else
        return "i"
    endif
endfunction
nnoremap <expr> i IndentWithI()

" Don't let q do anything.
nnoremap q <NOP>

" Allow saving of files as sudo when I forgot to start vim using sudo.
if executable('sudo') && executable('tee')
    command! SUwrite
        \ execute 'w !sudo tee % > /dev/null' |
        \ :edit!
endif
cmap w!! SUwrite

" Remove trailing whitespace
cmap trim s/\s\+$//

" Copy to clipboard
command! ClipFile :%w !pbcopy
set clipboard+=unnamedplus

" Set tmux name
set titlestring=%t
"if exists("$TMUX")
"    autocmd BufEnter * call system("tmux rename-window " . expand("%:t"))
"    autocmd VimLeave * call system("tmux setw automatic-rename")
"endif

" Add Markdown command
command! Markdown :w | :exe '!PATH="/usr/local/bin:$PATH" reattach-to-user-namespace -l markdown ' . shellescape(expand("%"))
nnoremap <C-p> :Markdown<cr>

" Add quick buffer selection
nnoremap gb :ls<CR>:b<Space>

" Enable persistent undo files to be stored
if has("persistent_undo")
    if ! has("nvim") && ! filereadable('~/.undodir')
        silent !mkdir -p ~/.undodir
    endif
    set undodir=~/.undodir/
    set undofile
endif

set backspace=indent,eol,start

" Auto-reload files if file changes
" CursorHold waits for the cursor to stop moving for `updatetime` milliseconds
autocmd CursorHold * checktime

" Set file type for conf files
"autocmd FileType conf set filetype=conf
au BufRead,BufNewFile *.conf setfiletype config

" JSON with comments
autocmd FileType json syntax match Comment +\/\/.\+$+

" creates vertical splits to the right
set splitright
" and horizontal splits down
set splitbelow

if $DEMO == "true"
    if filereadable(expand("~/.vim/demo.vim"))
        source ~/.vim/demo.vim
    endif
endif

let g:bullets_outline_levels = ['ROM', 'ABC', 'num', 'abc', 'rom', 'std*', 'std-', 'std+'] " move '-' after '*'
" Automatically indent and dedent on tab and shift+tab
" Seems to play well with completion for now. Perhaps nvim-cmp's setup takes precedence.
inoremap <Tab> <C-t>
inoremap <S-Tab> <C-d>
