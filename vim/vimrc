" try/catch is only in Vim7
if v:version >= 700
    " If pathogen is installed, start it up
    try
        source ~/.vim/plugin-config.vim
        runtime bundle/pathogen/autoload/pathogen.vim
        execute pathogen#infect()
        execute pathogen#helptags()
    catch
    endtry
endif

filetype plugin on
syntax on

" Prevent issues with non UNIX-conforming shells
"set shell=/bin/bash


command! NonASCII syntax match nonascii "[^\x00-\x7F]"
highlight nonascii ctermfg=015 ctermbg=001 cterm=none


" Background light/dark settings
function! SetBackground(mode)
    if a:mode == 'light'
        set background=light
        highlight SpecialKey ctermfg=White ctermbg=NONE
        highlight clear CursorLine
        highlight CursorLineNR term=none cterm=none ctermbg=White ctermfg=Black
        highlight SpellBad ctermfg=240 ctermbg=255 cterm=none
    else
        set background=dark
        highlight SpecialKey ctermfg=Black ctermbg=NONE
        highlight clear CursorLine
        highlight CursorLineNR term=none cterm=none ctermbg=Black ctermfg=White
        highlight SpellBad ctermfg=015 ctermbg=000 cterm=none
    endif
endfunc

function! AutoDetectBackground()
    if has("mac")
        silent call system("mac-term-dark-background")
        if v:shell_error
            " Terminal background color is light
            call SetBackground('light')
        else
            call SetBackground('dark')
        endif
    endif
endfunction
call AutoDetectBackground()

function! BackgroundToggle()
    if(&background == 'dark')
        call SetBackground('light')
    else
        call SetBackground('dark')
    endif
endfunc
nnoremap <leader>l :call BackgroundToggle()<cr>
nnoremap <C-l> :call BackgroundToggle()<cr>
inoremap <C-l> <C-O>:call BackgroundToggle()<cr>

" Set up tabs for autoindentation and tab expansion
set tabstop=4 shiftwidth=4 "copyindent smarttab smartindent
"set expandtab " automatically change tabs to spaces (overrides copyindent)
set linebreak " break lines on tokens rather than chars

" Set statusline
" %f shows current file
set statusline=%f

" Highlight current line's line number
" Original idea: https://stackoverflow.com/a/13275419/1530494
set cursorline
autocmd BufEnter * highlight clear CursorLine

" Switch tabs with Ctrl-Tab
"nnoremap <C-Left> :tabprevious<CR>
"nnoremap <C-Right> :tabnext<CR>
"inoremap <C-Left> <C-O>:tabprevious<CR>
"inoremap <C-Right> <C-O>:tabnext<CR>

" Go to first few tabs by number shortcut
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

if has("patch-7.4.354")
    set breakindent
    set breakindentopt=shift:8
else
    set showbreak=>\ "
endif

" Set Markdown options
function! SetMarkdownOptions()
    "setlocal breakindentopt=shift:-4 " TODO: attempt to set hanging indent
    set breakindentopt=shift:4
    inoremap . .<C-g>u
    inoremap ! !<C-g>u
    inoremap ? ?<C-g>u
    inoremap : :<C-g>u
    " Use z= to suggest spelling corrections,
    " use zg to add the word under the cursor,
    " use zw to mark the word as bad
endfunction
autocmd FileType markdown call SetMarkdownOptions()

function! SetShellOptions()
    let b:sleuth_automatic = 0
    setlocal expandtab
endfunction
autocmd FileType sh call SetShellOptions()

set history=5000

set spell
set spellcapcheck=""

" Show whitespace characters
set list
set listchars=tab:⫦┈,trail:◦,precedes:⇦,extends:⇨
highlight SpecialKey ctermfg=Black ctermbg=NONE

" Set ruler, to show line and column
set ruler

" Set line numbers on
set number

" Move cursor one line at a time, always
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk
nnoremap j gj
nnoremap <Down> gj
nnoremap k gk
nnoremap <Up> gk

" Searches
"set hlsearch " Highlight all search matches
set incsearch " Auto go to search results while typing
set ignorecase smartcase " Case insensitive search unless caps are used

" Tab completion will show menu instead of completing
set wildmenu
"set wildmode=list:longest,full " Print out a large list of all tab-completable files

" auto-complete plus spelling
set complete=.,w,b,u,t,i,kspell

" Remap :wq keys for accidentally holding shift
command! W w
command! Q q
command! -bang Q q<bang>
command! WQ wq
command! Wq wq
command! Qa qa
command! E e


" Use ctrl left and right to switch tabs
"nnoremap H :tabprevious<CR>
"nnoremap L :tabnext<CR>

" Enable mouse interaction
if has("mouse")
    set mouse=a
endif
" Enable vim split dragging
if ! has("nvim")
    if has("mouse_sgr")
        set ttymouse=sgr
    else
        set ttymouse=xterm2
    end
end

" Allow for some padding before/after cursor when scrolling
"set scrolloff=3
set scrolljump=5

" Enable code folding
set nofoldenable
set foldmethod=syntax

" Allows toggling between line numbers and relative line numbers.
function! NumberToggle()
    if(&number == 0 || &relativenumber == 1)
        set number
        set norelativenumber
    else
        set relativenumber
    endif
endfunc

function! NumberInsert()
    if (&number == 1)
       set norelativenumber
    endif
endfunc

function! NumberLeave()
    if (&number == 1)
       set relativenumber
    endif
endfunc

nnoremap <C-n> :call NumberToggle()<cr>
autocmd BufLeave,FocusLost,InsertEnter * call NumberInsert()
autocmd BufEnter,FocusGained,InsertLeave * call NumberLeave()

" Don't let q do anything.
nnoremap q <NOP>

" Allow saving of files as sudo when I forgot to start vim using sudo.
if executable('sudo') && executable('tee')
    command! SUwrite
        \ execute 'w !sudo tee % > /dev/null' |
        \ :edit!
endif
cmap w!! SUwrite

" Remove trailing whitespace
cmap trim %s/\s\+$//

" Copy to clipboard
command! ClipFile :%w !pbcopy
set clipboard=unnamed

" Highlight current line
"set cul
highlight CursorLine term=none cterm=none ctermbg=0

" Set tmux name
set titlestring=%t
"if exists("$TMUX")
"    autocmd BufEnter * call system("tmux rename-window " . expand("%:t"))
"    autocmd VimLeave * call system("tmux setw automatic-rename")
"endif

" Add Markdown command
command! Markdown :w | :exe '!PATH="/usr/local/bin:$PATH" reattach-to-user-namespace -l markdown ' . shellescape(expand("%"))
nnoremap <C-p> :Markdown<cr>

" Add quick buffer selection
nnoremap gb :ls<CR>:b<Space>

" Enable persistent undo files to be stored
if has("persistent_undo")
    if ! has("nvim") && ! filereadable('~/.undodir')
        silent !mkdir -p ~/.undodir
    endif
    set undodir=~/.undodir/
    set undofile
endif

set backspace=indent,eol,start

" Auto-reload files if file changes
" CursorHold waits for the cursor to stop moving for `updatetime` milliseconds
autocmd CursorHold * checktime

" Set file type for conf files
"autocmd FileType conf set filetype=conf
au BufRead,BufNewFile *.conf setfiletype config
